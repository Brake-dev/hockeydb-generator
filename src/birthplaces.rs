use rand::{self, thread_rng, Rng};

use crate::skaters::Nationality;

pub const BIRTHPLACES_CAN: [&str; 146] = [
    "LaSalle, QC, CAN",
    "Winnipeg, MB, CAN",
    "St. Albert, AB, CAN",
    "Brandon, MB, CAN",
    "Thunder Bay, ON, CAN",
    "Barrie, ON, CAN",
    "Peterborough, ON, CAN",
    "Keswick, ON, CAN",
    "Watson, SK, CAN",
    "New Liskeard, ON, CAN",
    "Strathclair, MB, CAN",
    "Halifax, NS, CAN",
    "Surrey, BC, CAN",
    "Oshawa, ON, CAN",
    "Nobleton, ON, CAN",
    "Dorchester, ON, CAN",
    "Port Moody, BC, CAN",
    "Brampton, ON, CAN",
    "West Vancouver, BC, CAN",
    "Coquitlam, BC, CAN",
    "Ottawa, ON, CAN",
    "Melville, SK, CAN",
    "Cambridge, ON, CAN",
    "Slave Lake, AB, CAN",
    "Chilliwack, BC, CAN",
    "Whitehorse, YT, CAN",
    "Calgary, AB, CAN",
    "Delta, BC, CAN",
    "Mississauga, ON, CAN",
    "London, ON, CAN",
    "Cranbrook, BC, CAN",
    "Morweena, MB, CAN",
    "Kitchener, ON, CAN",
    "Salmon Arm, BC, CAN",
    "Quebec City, QC, CAN",
    "Carbonear, NL, CAN",
    "New Westminster, BC, CAN",
    "Toronto, ON, CAN",
    "Hamilton, ON, CAN",
    "Fredericton, NB, CAN",
    "Montréal, QC, CAN",
    "Caledonia, ON, CAN",
    "Pointe-Claire, QC, CAN",
    "Windsor, ON, CAN",
    "Langley, BC, CAN",
    "Summerside, PE, CAN",
    "Oakville, ON, CAN",
    "Dauphin, MB, CAN",
    "Holland Landing, ON, CAN",
    "Whitby, ON, CAN",
    "Joliette, QC, CAN",
    "Markham, ON, CAN",
    "St-Eustache, QC, CAN",
    "Mimico, ON, CAN",
    "Prince Albert, SK, CAN",
    "Burlington, ON, CAN",
    "Fort Saskatchewan, AB, CAN",
    "Edmonton, AB, CAN",
    "St. John's, NL, CAN",
    "St-Hyacinthe, QC, CAN",
    "Becancour, QC, CAN",
    "Alliston, ON, CAN",
    "Aurora, ON, CAN",
    "Elkhorn, MB, CAN",
    "Sault Ste. Marie, ON, CAN",
    "Belleville, ON, CAN",
    "Hearst, ON, CAN",
    "Beaumont, AB, CAN",
    "Lethbridge, AB, CAN",
    "Sherbrooke, QC, CAN",
    "Canmore, AB, CAN",
    "Sainte-Marie, QC, CAN",
    "St. Malo, MB, CAN",
    "Sorel-Tracy, QC, CAN",
    "Scarborough, ON, CAN",
    "Cole Harbour, NS, CAN",
    "Yarmouth, NS, CAN",
    "St. Adolphe, MB, CAN",
    "Etobicoke, ON, CAN",
    "Mission, BC, CAN",
    "Saskatoon, SK, CAN",
    "Ste-Agathe-des-Monts, QC, CAN",
    "Gatineau, QC, CAN",
    "Ajax, ON, CAN",
    "Caledon, ON, CAN",
    "The Pas, MB, CAN",
    "Wainwright, AB, CAN",
    "Laval, QC, CAN",
    "Moncton, NB, CAN",
    "Vancouver, BC, CAN",
    "St. Catharines, ON, CAN",
    "North Vancouver, BC, CAN",
    "Sudbury, ON, CAN",
    "Georgetown, ON, CAN",
    "Chatham, ON, CAN",
    "Charlottetown, PE, CAN",
    "Fergus, ON, CAN",
    "Ste-Agathe, QC, CAN",
    "Pembroke, ON, CAN",
    "Camrose, AB, CAN",
    "Carp, ON, CAN",
    "Roberval, QC, CAN",
    "Abbotsford, BC, CAN",
    "Saint-Jerome, QC, CAN",
    "Richmond Hill, ON, CAN",
    "Longueuil, QC, CAN",
    "Québec City, QC, CAN",
    "Victoria, BC, CAN",
    "Estevan, SK, CAN",
    "Plessisville, QC, CAN",
    "Haliburton, ON, CAN",
    "Uxbridge, ON, CAN",
    "Kamloops, BC, CAN",
    "Ardrossan, AB, CAN",
    "Regina, SK, CAN",
    "Brantford, ON, CAN",
    "Burnaby, BC, CAN",
    "Richmond, BC, CAN",
    "Bromont, QC, CAN",
    "Waterloo, ON, CAN",
    "Bowmanville, ON, CAN",
    "Newmarket, ON, CAN",
    "Sorel, QC, CAN",
    "Victoriaville, QC, CAN",
    "Nepean, ON, CAN",
    "Cap-Rouge, QC, CAN",
    "Clinton, ON, CAN",
    "Val-d'Or, QC, CAN",
    "Guelph, ON, CAN",
    "Port Perry, ON, CAN",
    "Trois-Rivières, QC, CAN",
    "Saint-Narcisse, QC, CAN",
    "Kingston, ON, CAN",
    "Stratford, ON, CAN",
    "Wilcox, SK, CAN",
    "Mt. Brydges, ON, CAN",
    "Viking, AB, CAN",
    "Duncan, BC, CAN",
    "Carlyle, SK, CAN",
    "Amos, QC, CAN",
    "Brockville, ON, CAN",
    "Yorkton, SK, CAN",
    "Davidson, SK, CAN",
    "King City, ON, CAN",
    "Aldergrove, BC, CAN",
    "Comox, BC, CAN",
];

pub const BIRTHPLACES_USA: [&str; 179] = [
    "Fargo, ND, USA",
    "New York, NY, USA",
    "Bellmawr, NJ, USA",
    "Columbus, OH, USA",
    "Ypsilanti, MI, USA",
    "Pembroke Pines, FL, USA",
    "Denver, CO, USA",
    "Elmira, NY, USA",
    "East Weymouth, MA, USA",
    "St. Louis, MO, USA",
    "Spokane, WA, USA",
    "Phoenix, AZ, USA",
    "Two Harbors, MN, USA",
    "North Billerica, MA, USA",
    "Portland, ME, USA",
    "Colorado Springs, CO, USA",
    "Baton Rouge, LA, USA",
    "Long Beach, NY, USA",
    "Dearborn Heights, MI, USA",
    "Parkland, FL, USA",
    "Anchorage, AK, USA",
    "Staten Island, NY, USA",
    "Fort Myers, FL, USA",
    "Niagara Falls, NY, USA",
    "Brooklyn, NY, USA",
    "Biloxi, MS, USA",
    "Middletown, NJ, USA",
    "Haverhill, MA, USA",
    "Indianapolis, IN, USA",
    "Grosse Pointe, MI, USA",
    "Canton, NY, USA",
    "Hollidaysburg, PA, USA",
    "Syracuse, NY, USA",
    "Newport Beach, CA, USA",
    "Matawan, NJ, USA",
    "Buffalo, NY, USA",
    "Philadelphia, PA, USA",
    "Canton, MI, USA",
    "Orlando, FL, USA",
    "Plano, TX, USA",
    "Manchester, NH, USA",
    "Tarrytown, NY, USA",
    "Northbrook, IL, USA",
    "Ann Arbor, MI, USA",
    "Farmington Hills, MI, USA",
    "Chicago, IL, USA",
    "Waterford, MI, USA",
    "St. Clair, MI, USA",
    "Tonka Bay, MN, USA",
    "Baudette, MN, USA",
    "Apple Valley, MN, USA",
    "Edina, MN, USA",
    "Livingston, NJ, USA",
    "Warroad, MN, USA",
    "Smithtown, NY, USA",
    "Carmel, IN, USA",
    "Newtown, CT, USA",
    "Scottsdale, AZ, USA",
    "St. Cloud, MN, USA",
    "Darien, CT, USA",
    "Providence, RI, USA",
    "Ham Lake, MN, USA",
    "Boxford, MA, USA",
    "Pittsburgh, PA, USA",
    "Boston, MA, USA",
    "Jericho, NY, USA",
    "Richmond, VA, USA",
    "Burnsville, MN, USA",
    "Hancock, MI, USA",
    "St. Paul, MN, USA",
    "San Diego, CA, USA",
    "Milford, CT, USA",
    "Mosinee, WI, USA",
    "Palos, IL, USA",
    "Holland, MI, USA",
    "Cumberland, RI, USA",
    "Minnetonka, MN, USA",
    "Stillwater, MN, USA",
    "Naples, FL, USA",
    "Lakeville, MN, USA",
    "Bloomington, MN, USA",
    "Eden Prairie, MN, USA",
    "Anaheim, CA, USA",
    "Fort Wayne, IN, USA",
    "Braintree, MA, USA",
    "Oxford, MI, USA",
    "Franklin Square, NY, USA",
    "Rogers, MN, USA",
    "Whitefish, MT, USA",
    "Johnston, RI, USA",
    "Dorchester, MA, USA",
    "Lindstrom, MN, USA",
    "Long Beach, CA, USA",
    "Chatham, NJ, USA",
    "Pontiac, MI, USA",
    "Boulder, CO, USA",
    "Charlestown, MA, USA",
    "Milton, MA, USA",
    "Parma, OH, USA",
    "Riverside, CT, USA",
    "Grand Rapids, MI, USA",
    "Littleton, CO, USA",
    "Omaha, NE, USA",
    "Hartland, MI, USA",
    "Elk River, MN, USA",
    "Huntsville, AL, USA",
    "Coral Springs, FL, USA",
    "Massapequa, NY, USA",
    "Everett, WA, USA",
    "Natick, MA, USA",
    "Boca Raton, FL, USA",
    "Detroit, MI, USA",
    "San Ramon, CA, USA",
    "New Canaan, CT, USA",
    "Pasadena, CA, USA",
    "Eau Claire, WI, USA",
    "Edison, NJ, USA",
    "Dardenne Prairie, MO, USA",
    "Roseville, MN, USA",
    "Madison, WI, USA",
    "Arlington, TX, USA",
    "Andover, MN, USA",
    "Rochester Hills, MI, USA",
    "Dublin, OH, USA",
    "Wilmette, IL, USA",
    "Norwell, MA, USA",
    "Cleveland, OH, USA",
    "East Longmeadow, MA, USA",
    "Bedford, NY, USA",
    "Biddeford, ME, USA",
    "Farmington, MN, USA",
    "Rochester, MI, USA",
    "Robbinsville, NJ, USA",
    "Missouri City, TX, USA",
    "Walpole, MA, USA",
    "Hinsdale, IL, USA",
    "Greenlawn, NY, USA",
    "Sioux Falls, SD, USA",
    "Canton, MA, USA",
    "Gilroy, CA, USA",
    "North Andover, MA, USA",
    "Arcadia, CA, USA",
    "Rochester, NH, USA",
    "West Bloomfield, MI, USA",
    "Milford, MA, USA",
    "Hilton Head Island, SC, USA",
    "Massena, NY, USA",
    "Maple Grove, MN, USA",
    "Oklahoma City, OK, USA",
    "Salt Lake City, UT, USA",
    "Thousand Oaks, CA, USA",
    "Elk Grove, IL, USA",
    "Brainerd, MN, USA",
    "Washington, MI, USA",
    "Basking Ridge, NJ, USA",
    "Kingsford, MI, USA",
    "Raleigh, NC, USA",
    "Chesterfield, MO, USA",
    "Southborough, MA, USA",
    "South St. Paul, MN, USA",
    "Hibbing, MN, USA",
    "Hingham, MA, USA",
    "Moorhead, MN, USA",
    "Minneapolis, MN, USA",
    "New Hampton, NH, USA",
    "Alton, IL, USA",
    "Wayzata, MN, USA",
    "Scituate, MA, USA",
    "Dearborn, MI, USA",
    "East Palestine, OH, USA",
    "Birmingham, MI, USA",
    "Duluth, MN, USA",
    "Houston, TX, USA",
    "Green Bay, WI, USA",
    "Shelby Township, MI, USA",
    "Eden, NY, USA",
    "Saginaw, MN, USA",
    "Commerce, MI, USA",
    "North Chelmsford, MA, USA",
];

pub const BIRTHPLACES_SWE: [&str; 45] = [
    "Boden, SWE",
    "Helsingborg, SWE",
    "Lidkoping, SWE",
    "Stockholm, SWE",
    "Gavle, SWE",
    "Uppsala, SWE",
    "Gothenburg, SWE",
    "Kungsbacka, SWE",
    "Nynashamn, SWE",
    "Karlstad, SWE",
    "Ljungby, SWE",
    "Tranas, SWE",
    "Orebro, SWE",
    "Falun, SWE",
    "Linkoping, SWE",
    "Leksand, SWE",
    "Vastervik, SWE",
    "Härnösand, SWE",
    "Lugnvik, SWE",
    "Alvkarleby, SWE",
    "Sundbyberg, SWE",
    "Landsbro, SWE",
    "Skelleftea, SWE",
    "Ornskoldsvik, SWE",
    "Vasteras, SWE",
    "Karlskrona, SWE",
    "Jarfalla, SWE",
    "Göteborg, SWE",
    "Gallivare, SWE",
    "Malmo, SWE",
    "Pitea, SWE",
    "Danderyd, SWE",
    "Borlange, SWE",
    "Landskrona, SWE",
    "Kramfors, SWE",
    "Ostervala, SWE",
    "Halmstad, SWE",
    "Umea, SWE",
    "Kristianstad, SWE",
    "Bockträsk, SWE",
    "Eksjö, SWE",
    "Sundsvall, SWE",
    "Eksjo, SWE",
    "Tingsryd, SWE",
    "Marsta, SWE",
];

pub const BIRTHPLACES_RUS: [&str; 25] = [
    "Barnaul, RUS",
    "Novokuznetsk, RUS",
    "Penza, RUS",
    "Moscow, RUS",
    "Omsk, RUS",
    "Angarsk, RUS",
    "Yaroslavl, RUS",
    "Mezhdurechensk, RUS",
    "Samara, RUS",
    "Lipetsk, RUS",
    "Korkino, RUS",
    "Perm, RUS",
    "Chelyabinsk, RUS",
    "Khabarovsk, RUS",
    "Magnitogorsk, RUS",
    "Maykop, RUS",
    "Tyumen, RUS",
    "Ussuriysk, RUS",
    "St. Petersburg, RUS",
    "Yakutsk, RUS",
    "Ufa, RUS",
    "Cherepovets, RUS",
    "Nizhnekamsk, RUS",
    "Zhukovskiy, RUS",
    "Nizhny Tagil, RUS",
];

pub const BIRTHPLACES_FIN: [&str; 25] = [
    "Rauma, FIN",
    "Pori, FIN",
    "Turku, FIN",
    "Oulu, FIN",
    "Espoo, FIN",
    "Riihimaki, FIN",
    "Helsinki, FIN",
    "Tampere, FIN",
    "Siilinjarvi, FIN",
    "Kiiminki, FIN",
    "Joensuu, FIN",
    "Lappeenranta, FIN",
    "Kirkkonummi, FIN",
    "Vantaa, FIN",
    "Piikkio, FIN",
    "Nousiainen, FIN",
    "Nokia, FIN",
    "Kuopio, FIN",
    "Hameenlinna, FIN",
    "Kempele, FIN",
    "Forssa, FIN",
    "Vihti, FIN",
    "Jyväskylä, FIN",
    "Kotka, FIN",
    "Honkajoki, FIN",
];

pub const BIRTHPLACES_CZE: [&str; 18] = [
    "Nove Mesto na Morave, CZE",
    "Havirov, CZE",
    "Brno, CZE",
    "Kadan, CZE",
    "Frydek-Mistek, CZE",
    "Pardubice, CZE",
    "Kromeriz, CZE",
    "Prague, CZE",
    "Chomutov, CZE",
    "Ostrava, CZE",
    "Liberec, CZE",
    "Jihlava, CZE",
    "Pisek, CZE",
    "Havlickuv Brod, CZE",
    "Vitkov, CZE",
    "Trebic, CZE",
    "Hradec Kralove, CZE",
    "Praha, CZE",
];

pub fn get_birthplace_by_nationality(nationality: &Nationality) -> String {
    match nationality {
        Nationality::CAN => {
            let birthplace_index = thread_rng().gen_range(0..BIRTHPLACES_CAN.len());
            return String::from(BIRTHPLACES_CAN[birthplace_index]);
        }
        Nationality::USA => {
            let birthplace_index = thread_rng().gen_range(0..BIRTHPLACES_USA.len());
            return String::from(BIRTHPLACES_USA[birthplace_index]);
        }
        Nationality::SWE => {
            let birthplace_index = thread_rng().gen_range(0..BIRTHPLACES_SWE.len());
            return String::from(BIRTHPLACES_SWE[birthplace_index]);
        }
        Nationality::RUS => {
            let birthplace_index = thread_rng().gen_range(0..BIRTHPLACES_RUS.len());
            return String::from(BIRTHPLACES_RUS[birthplace_index]);
        }
        Nationality::FIN => {
            let birthplace_index = thread_rng().gen_range(0..BIRTHPLACES_FIN.len());
            return String::from(BIRTHPLACES_FIN[birthplace_index]);
        }
        Nationality::CZE => {
            let birthplace_index = thread_rng().gen_range(0..BIRTHPLACES_CZE.len());
            return String::from(BIRTHPLACES_CZE[birthplace_index]);
        }
    }
}
